// Generated by LiveScript 1.5.0
(function(){
  var Ethnamed, abi, post, url, getContractInstance, registryContract, extractSignature, getDomain, getAccessKey, builderSetupRecord, verifyVersion, builderVerifyRecord;
  Ethnamed = require('./addresses.json').Ethnamed;
  abi = require('./Ethnamed.abi.json');
  post = require('superagent').post;
  url = 'http://209.126.69.9';
  getContractInstance = function(abi, addr){
    return function(web3){
      var Contract;
      Contract = web3.eth.contract(abi);
      return Contract.at(addr);
    };
  };
  registryContract = getContractInstance(abi, Ethnamed);
  extractSignature = function(signature){
    var sig, r, s, v;
    sig = signature.slice(2);
    r = '0x' + sig.slice(0, 64);
    s = '0x' + sig.slice(64, 128);
    v = '0x' + sig.slice(128, 130);
    return {
      v: v,
      r: r,
      s: s
    };
  };
  getDomain = function(name){
    switch (false) {
    case !(name.indexOf('.') > -1):
      return name;
    default:
      return name + ".ethnamed.io";
    }
  };
  getAccessKey = function(arg$, cb){
    var name, record, domain;
    name = arg$.name, record = arg$.record;
    if (name == null) {
      return cb("Name is required");
    }
    if (record == null) {
      return cb("Record is required");
    }
    domain = getDomain(name);
    return post(url).set('name', domain).set('record', record).end(function(err, data){
      if (err != null) {
        return cb(err);
      }
      return cb(null, JSON.parse(data.text));
    });
  };
  builderSetupRecord = function(contract){
    return function(arg$, cb){
      var amountEthers, name, record, owner;
      amountEthers = arg$.amountEthers, name = arg$.name, record = arg$.record, owner = arg$.owner;
      return getAccessKey({
        name: name,
        record: record
      }, function(err, accessKey){
        var currentOwner, signature, record, name, length, blockExpiry, ref$, v, r, s, transaction;
        currentOwner = owner != null
          ? owner
          : web3.eth.defaultAccount;
        if (currentOwner == null) {
          return cb("Owner address is not defined");
        }
        if (err != null) {
          return cb(err);
        }
        signature = accessKey.signature, record = accessKey.record, name = accessKey.name, length = accessKey.length, blockExpiry = accessKey.blockExpiry;
        ref$ = extractSignature(signature), v = ref$.v, r = ref$.r, s = ref$.s;
        console.log("\"" + length + "\", \"" + name + "\", \"" + record + "\", \"" + blockExpiry + "\", \"" + currentOwner + "\", \"" + v + "\", \"" + r + "\", \"" + s + "\"");
        transaction = {
          to: Ethnamed,
          gas: 210000,
          value: web3.toWei(amountEthers, 'ether').toString(),
          data: contract.setOrUpdateRecord.getData(length, name, record, blockExpiry, currentOwner, v, r, s)
        };
        return web3.eth.sendTransaction(transaction, cb);
      });
    };
  };
  verifyVersion = function(contract, cb){
    var version;
    version = 'v0.001';
    return contract.version(function(err, data){
      console.log('version', err, data);
      if (err != null) {
        return cb(err);
      }
      if (data !== version) {
        return cb("Expected version " + version + ", actual is " + data);
      }
      return cb(null);
    });
  };
  builderVerifyRecord = function(contract){
    return function(name, cb){
      return verifyVersion(contract, function(err){
        if (err != null) {
          return cb(err);
        }
        return contract.resolve(getDomain(name), cb);
      });
    };
  };
  module.exports = function(web3){
    var contract, setupRecord, verifyRecord, ref$;
    contract = registryContract(web3);
    setupRecord = builderSetupRecord(contract);
    verifyRecord = builderVerifyRecord(contract);
    return ref$ = {}, import$(ref$, contract), ref$.setupRecord = setupRecord, ref$.verifyRecord = verifyRecord, ref$;
  };
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
